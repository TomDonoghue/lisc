.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_02-CountsAnalysis.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_02-CountsAnalysis.py:


Tutorial 02: Counts Analysis
============================

Analyzing scraped co-occurence data.


Counts Analyses
---------------

This tutorial explores the built in utilities for exploring & analyzing counts data.




.. code-block:: python


    from lisc import SCDB, load_object

    from lisc.plts.counts import *








.. code-block:: python


    # Reload the counts object from the last tutorial
    counts = load_object('tutorial_counts', SCDB('lisc_db'))







The `Counts` object has some helper methods to explore the collected data.

First lets check the number of counts per term list.




.. code-block:: python


    # Look at the collect counts data for the first set of terms
    counts.check_data(data_type='counts', dim='A')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    For  'frontal lobe'    the highest association is  'audition'        with         376
    For  'temporal lobe'   the highest association is  'audition'        with        1296
    For  'parietal lobe'   the highest association is  'audition'        with         231
    For  'occipital lobe'  the highest association is  'vision'          with         235



.. code-block:: python


    # Look at the collect counts data for the second set of terms
    counts.check_data(data_type='counts', dim='B')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    For  'vision'          the highest association is  'occipital lobe'  with         235
    For  'audition'        the highest association is  'temporal lobe'   with        1296
    For  'somatosensory'   the highest association is  'parietal lobe'   with         187
    For  'olfaction'       the highest association is  'temporal lobe'   with          70
    For  'gustation'       the highest association is  'temporal lobe'   with          44
    For  'proprioception'  the highest association is  'parietal lobe'   with           9
    For  'nociception'     the highest association is  'temporal lobe'   with         197


Scores
------

The Counts co-occurence data collection gives us a raw data matrix of the number of
papers in with terms co-occur, as well as counts of the number of total papers using
each term.

Once we have this, we often will want to calculate either normalized co-occurence
measures, and/or some kind of similarity score.

To normalize the data, we can divide the co-occurence counts by the number of papers
per term. This allows us the examine and analyze, for example, the proportion of papers
with a given term that also include a secondary term of interest.

We can also calculate some kind of association index or score. For example, the
`Jaccard index <https://en.wikipedia.org/wiki/Jaccard_index>`_ is a standard meassure
for measuring the similarity of samples, and is also available to compute and use.

When using the counts object, both of these measures are available, through the
`compute_score` method. You can indicate which kind of score (normalization or association)
index) as an input to the method.




.. code-block:: python


    # Compute the association index
    counts.compute_score('association')








.. code-block:: python


    # Check out the computed score
    print(counts.score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[1.15972671e-03 3.37322592e-03 3.13464847e-03 1.87364161e-03
      3.78188007e-04 2.14949755e-04 2.62723935e-04]
     [1.32382090e-03 1.04873884e-02 3.32076017e-03 1.76335743e-03
      7.95516182e-04 6.32071298e-05 3.18671737e-04]
     [7.22156615e-04 2.25370251e-03 5.62203115e-03 4.54158388e-04
      1.80701120e-04 9.48266779e-04 1.89555651e-04]
     [2.01935140e-03 8.27863521e-04 1.08577633e-03 3.04154754e-04
      0.00000000e+00 0.00000000e+00 1.05881997e-04]]


Plotting and Clustering for Counts Data
---------------------------------------

Co-occurence data is basically a matrix of numbers reflecting the relationship between terms.

LISC provides some plot function to visualize the co-occurence data, as a matrix.

In addition to plotting the data, we can also do clustering analysis and visualizations,
that attempt to find structure in the data. LISC also offers some common clustering
approaches to sort and visualize collected co-occurnce data.




.. code-block:: python


    # Plot a matrix of the association index data
    plot_matrix(counts.score, counts.terms['B'].labels, counts.terms['A'].labels)




.. image:: /auto_tutorials/images/sphx_glr_plot_02-CountsAnalysis_001.png
    :class: sphx-glr-single-img





.. code-block:: python


    # Plot a clustermap of the association index data
    plot_clustermap(counts.score, counts.terms['B'].labels, counts.terms['A'].labels)




.. image:: /auto_tutorials/images/sphx_glr_plot_02-CountsAnalysis_002.png
    :class: sphx-glr-single-img





.. code-block:: python


    # Plot a dendrogram, to cluster the terms
    plot_dendrogram(counts.score, counts.terms['B'].labels)



.. image:: /auto_tutorials/images/sphx_glr_plot_02-CountsAnalysis_003.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  0.321 seconds)


.. _sphx_glr_download_auto_tutorials_plot_02-CountsAnalysis.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_02-CountsAnalysis.py <plot_02-CountsAnalysis.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_02-CountsAnalysis.ipynb <plot_02-CountsAnalysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
