.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_02-CountsAnalysis.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_02-CountsAnalysis.py:


Tutorial 02: Counts Analysis
============================

Analyzing collected co-occurrence data.


Counts Analyses
---------------

This tutorial explores the built in utilities for exploring & analyzing counts data.




.. code-block:: python


    from lisc.utils.db import SCDB
    from lisc.utils.io import load_object

    from lisc.plts.counts import *








.. code-block:: python


    # Reload the counts object from the last tutorial
    counts = load_object('tutorial_counts', SCDB('lisc_db'))







The `Counts` object has some helper methods to explore the collected data.

First lets check the number of counts per term list.




.. code-block:: python


    # Look at the collected counts data for the first set of terms
    counts.check_data(data_type='counts', dim='A')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    For  'frontal lobe'    the highest association is  'audition'        with         376
    For  'temporal lobe'   the highest association is  'audition'        with        1296
    For  'parietal lobe'   the highest association is  'audition'        with         231
    For  'occipital lobe'  the highest association is  'vision'          with         235



.. code-block:: python


    # Look at the collected counts data for the second set of terms
    counts.check_data(data_type='counts', dim='B')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    For  'vision'          the highest association is  'occipital lobe'  with         235
    For  'audition'        the highest association is  'temporal lobe'   with        1296
    For  'somatosensory'   the highest association is  'parietal lobe'   with         187
    For  'olfaction'       the highest association is  'temporal lobe'   with          70
    For  'gustation'       the highest association is  'temporal lobe'   with          44
    For  'proprioception'  the highest association is  'parietal lobe'   with           9
    For  'nociception'     the highest association is  'temporal lobe'   with         197


Normalization & Scores
----------------------

The Counts co-occurrence data collection gives us a raw data matrix of the number of
articles in which terms co-occur, as well as the number of articles for each term independently.

Once we have the co-occurence matrix, we typically want to calculate a
normalized co-occurrence measure, and/or some other kind of similarity score.

To normalize the data, we can divide the co-occurrence counts by the number of articles
per term. This allows us the examine, for example, the proportion of articles
that include particular co-occurrence patterns.

We can also calculate an association index or score. For example, the
`Jaccard index <https://en.wikipedia.org/wiki/Jaccard_index>`_ is a standard meassure
for measuring the similarity of samples, and is also available to compute and use.

With the counts object, both of these measures are available, using the
`compute_score` method. You can indicate which kind of score - normalization or
association index - as an input to the method.




.. code-block:: python


    # Compute a normalization of the co-occurrence data
    counts.compute_score('normalize', dim='A')








.. code-block:: python


    # Check out the computed normalization
    print(counts.score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[1.05451937e-02 2.69727403e-02 9.54088953e-03 3.58680057e-03
      1.14777618e-03 2.86944046e-04 1.14060258e-02]
     [6.85820204e-03 4.80444856e-02 6.82113068e-03 2.59499537e-03
      1.63113994e-03 7.41427247e-05 7.30305839e-03]
     [1.76092811e-02 4.78558111e-02 3.87404185e-02 1.65734411e-03
      1.24300808e-03 1.86451212e-03 2.34099855e-02]
     [6.44188596e-02 2.30263158e-02 9.59429825e-03 1.37061404e-03
      0.00000000e+00 0.00000000e+00 1.72697368e-02]]


The normalization is the number of articles with both terms, divided by the number of
articles for each term alone. It can therefore be interpreted as a proportion of articles
with term `a` that also have term `b`, or as `a & b / a`.

Note that when using two different terms lists, you have to choose which list of
terms to normalize by. That is controlled by the 'dim' input.

In this case, we have calculated the normalized data as the proportion of
articles for each anatomical term that include each perception term.




.. code-block:: python


    # Compute the association index
    counts.compute_score('association')








.. code-block:: python


    # Check out the computed score
    print(counts.score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[1.15945230e-03 3.37292332e-03 3.13442685e-03 1.87364161e-03
      3.78143316e-04 2.14938205e-04 2.62681833e-04]
     [1.32349890e-03 1.04862005e-02 3.32034070e-03 1.76317977e-03
      7.95386757e-04 6.31971435e-05 3.18619681e-04]
     [7.21972599e-04 2.25348266e-03 5.62152412e-03 4.54158388e-04
      1.80673914e-04 9.48166877e-04 1.89524813e-04]
     [2.01883097e-03 8.27781939e-04 1.08567529e-03 3.04154754e-04
      0.00000000e+00 0.00000000e+00 1.05864738e-04]]


The Jaccard index is a normalized measure of similarity, bounded between 0 and 1.

One benefit of the Jaccard index is that you do not have to choose a terms list
to normalize by - the calculated measure considers both terms lists.



Plotting and Clustering for Counts Data
---------------------------------------

Co-occurrence data is basically a matrix of numbers reflecting the relationship between terms.

LISC provides some plot functions to visualize the co-occurrence data, as a matrix.

In addition to plotting the data, we can also do clustering analysis and visualizations,
that attempt to find structure in the data.

LISC also offers some common clustering approaches to sort and visualize
collected co-occurrence data.




.. code-block:: python


    # Plot a matrix of the association index data
    plot_matrix(counts.score, counts.terms['B'].labels, counts.terms['A'].labels)




.. image:: /auto_tutorials/images/sphx_glr_plot_02-CountsAnalysis_001.png
    :class: sphx-glr-single-img





.. code-block:: python


    # Plot a clustermap of the association index data
    plot_clustermap(counts.score, counts.terms['B'].labels, counts.terms['A'].labels)




.. image:: /auto_tutorials/images/sphx_glr_plot_02-CountsAnalysis_002.png
    :class: sphx-glr-single-img





.. code-block:: python


    # Plot a dendrogram, to cluster the terms
    plot_dendrogram(counts.score, counts.terms['B'].labels)



.. image:: /auto_tutorials/images/sphx_glr_plot_02-CountsAnalysis_003.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  0.377 seconds)


.. _sphx_glr_download_auto_tutorials_plot_02-CountsAnalysis.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_02-CountsAnalysis.py <plot_02-CountsAnalysis.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_02-CountsAnalysis.ipynb <plot_02-CountsAnalysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
