.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_functions_counts.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_functions_counts.py:


Counts with Functions
=====================

Scraping word co-occurence data, using a function oriented approach.


Function Approach: collect_counts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MORE WORDS.




.. code-block:: python


    from lisc.collect import collect_counts
    from lisc.analysis.counts import compute_association_index








.. code-block:: python


    # Set some terms lists
    terms_a = [['protein'], ['gene']]
    terms_b = [['heart'], ['lung']]








.. code-block:: python


    # Run a scrape of 'counts' (co-occurence data) - across a single list of terms
    coocs, term_counts, meta_dat = collect_counts(terms_a, db='pubmed', verbose=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running counts for:  protein
    Running counts for:  gene



.. code-block:: python


    # Check how many papers were found for each combination
    print(coocs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[     0 528678]
     [528678      0]]



.. code-block:: python


    # Print out how many papers found for each term
    for term, count in zip(terms_a, term_counts):
        print('{:12} : {}'.format(term[0], count))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    protein      : 2387464
    gene         : 1612102


When given a single set of terms, the 'Counts' scrapes each term  against each other term.

You can also specify different sets of terms to scrape, as below, whereby
each term in list A is scraped for co-occurence for each term in list B
(but not to other terms in list A).




.. code-block:: python


    # Run a scrape of 'counts' (co-occurence data) across two different lists of terms
    coocs, term_counts, meta_dat = collect_counts(
        terms_a=terms_a, terms_b=terms_b, db='pubmed', verbose=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running counts for:  protein
    Running counts for:  gene


Calculating Scores
~~~~~~~~~~~~~~~~~~





.. code-block:: python


    # Compute the association index score
    score = compute_association_index(coocs, term_counts[0], term_counts[1])








.. code-block:: python


    # Check the computed score measure for the co-occurence collection
    print(score)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[0.01876555 0.02415963]
     [0.01467207 0.02219578]]


**Total running time of the script:** ( 0 minutes  13.144 seconds)


.. _sphx_glr_download_auto_examples_plot_functions_counts.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_functions_counts.py <plot_functions_counts.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_functions_counts.ipynb <plot_functions_counts.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
