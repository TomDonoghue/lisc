.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_functions_counts.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_functions_counts.py:


Counts with Functions
=====================

Collect word co-occurence data, using the underlying functions from LISC.


Function Approach: collect_counts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The core function for collecting co-occurence data is the `collect_counts` function.

Given a list of search terms, this function handles all the requests to collect the data.




.. code-block:: python


    # Import function to collect data, and helper functions to analyze co-occurence data
    from lisc.collect import collect_counts
    from lisc.analysis.counts import compute_normalization, compute_association_index








.. code-block:: python


    # Set some terms to search for
    terms_a = [['protein'], ['gene']]
    terms_b = [['heart'], ['lung']]








.. code-block:: python


    # Collect 'counts' (co-occurence data) - across a single list of terms
    coocs, term_counts, meta_dat = collect_counts(terms_a, db='pubmed', verbose=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running counts for:  protein
    Running counts for:  gene



.. code-block:: python


    # Check how many papers were found for each combination
    print(coocs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[     0 530065]
     [530065      0]]



.. code-block:: python


    # Print out how many papers found for each term
    for term, count in zip(terms_a, term_counts):
        print('{:12} : {}'.format(term[0], count))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    protein      : 2393551
    gene         : 1616868


When given a single set of terms, the function collects counts of each term
against every other term in the list.

You can also specify different sets of terms to collect. In the example below,
each term in list A is collected measuring co-occurences with each term in list B.




.. code-block:: python


    # Collect 'counts' (co-occurence data) across two different lists of terms
    coocs, term_counts, meta_dat = collect_counts(
        terms_a=terms_a, terms_b=terms_b, db='pubmed', verbose=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running counts for:  protein
    Running counts for:  gene


Calculating Co-Occurence Scores
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once the co-occurence data is collected, we often want to compute a normalization
or transform of the data.

Some more details on the measures available in LISC are available in the `Counts`
tutorial. When using the functions approach, all implemented scores and transforms
are available in `lisc.analysis`, as functions that take in our collected data.




.. code-block:: python


    # Calculate the normalized data measure, normalizing the co-occurences by the term counts
    normed_coocs = compute_normalization(coocs, term_counts[0], dim='A')

    # Check the computed score measure for the co-occurence collection
    print(normed_coocs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[0.0246291  0.02931293]
     [0.02166411 0.02950024]]



.. code-block:: python


    # Compute the association index score, calculating the Jaccard index from the co-occurences
    score = compute_association_index(coocs, term_counts[0], term_counts[1])

    # Check the computed score measure for the co-occurence collection
    print(score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[0.01876902 0.02417714]
     [0.01466768 0.02220807]]


From here, further analysis of collected co-occurence data depends on the goal of the analysis.

There are also plot functions available, same as demonstrated in the Counts tutorial.



**Total running time of the script:** ( 0 minutes  14.180 seconds)


.. _sphx_glr_download_auto_examples_plot_functions_counts.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_functions_counts.py <plot_functions_counts.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_functions_counts.ipynb <plot_functions_counts.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
