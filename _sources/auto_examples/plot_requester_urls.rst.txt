.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_requester_urls.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_requester_urls.py:


URLs and Requests
=================

Exploring LISC utilities for managing URLs and requests.


URLs & Requests
---------------

LISC uses custom objects to manage URLs, that can store how to interact with
APIs, as well as a custom object to manage requests.

Note that to use the main LISC functionality, you don't have to deal with these
objects directly, as they are used 'under the hood' by LISC functions for collecting
data and interacting APIs without requiring user interaction.

This example can be used if you want to explore custom data collections, and/or to
use LISC for other APIs.




.. code-block:: python


    # Import the requester object
    from lisc.requester import Requester







Requester Object
~~~~~~~~~~~~~~~~

The Requester object uses the `requests <https://2.python-requests.org/en/master/>`_
module to launch URL requests, and adds some functionality such as throttling, to
ensure requests respect API limits, as well as metadata collection, and URL logging.




.. code-block:: python


    # Initialize a requester object
    req = Requester()








.. code-block:: python


    # Set the minimum wait time between requests
    req.set_wait_time(0.5)








.. code-block:: python


    # Use the Requester object to request some web pages
    for url in ['https://www.google.com', 'https://www.yahoo.com', 'https://duckduckgo.com']:
        page = req.request_url(url)
        print('Collecting web page \t {} \t got status code \t {}'.format(page.url, page.status_code))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Collecting web page      https://www.google.com/         got status code         200
    Collecting web page      https://www.yahoo.com/          got status code         200
    Collecting web page      https://duckduckgo.com/         got status code         200



.. code-block:: python


    # Check details of the requester object
    req.check()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Requester object is active:      True
    Number of requests sent:         3
    Requester opened:                12:51:38 Friday 16 August 2019
    Requester closed:



.. code-block:: python


    # Get information from the requester object as a dictionary
    print(req.as_dict())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'is_active': True, 'n_requests': 3, 'wait_time': 0.5, 'start_time': '12:51:38 Friday 16 August 2019', 'end_time': '', 'logging': None, 'log': None}


URLs Object
~~~~~~~~~~~

The URLs object is the base object used in LISC to store URLs to interact with APIs.

It includes functionality to store and use different utilities available through
an API, and store and use different settings.

In the example, we can explore using the the URLs object for a new API, in this case
the `duckduckgo <https://duckduckgo.com>`_ API.




.. code-block:: python


    # Import the URLs object
    from lisc.urls import URLs








.. code-block:: python


    # Set the base path for an API to use
    base_path = 'https://api.duckduckgo.com/'

    # Create the URLs object for the API, specifying it has a search utility
    urls = URLs(base_path, {'search' : ''})








.. code-block:: python


    # Build and check the search URL
    urls.build_url('search', settings={'format': 'json'})
    urls.check_url('search')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    https://api.duckduckgo.com/?format=json



.. code-block:: python


    # Get the URL to launch a search request with a specified search term
    api_url = urls.get_url('search', settings={'q' : 'brain'})
    print(api_url)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    https://api.duckduckgo.com/?format=json&q=brain



.. code-block:: python


    # Request the URL with the requester object from before
    api_page = req.request_url(api_url)








.. code-block:: python


    # Check the source of the first search result
    api_page.json()['AbstractSource']







Supported APIs
~~~~~~~~~~~~~~

The URLs object can be used to create objects that support external APIs.

LISC currently supports APIs for
`EUtils <https://www.ncbi.nlm.nih.gov/books/NBK25500/>`_ and
`OpenCitations <https://opencitations.net>`_.

These are implemented as custom objects built on top of the URLs object.




.. code-block:: python


    # Import URL objects for supported APIs
    from lisc.urls import EUtils, OpenCitations








.. code-block:: python


    # Initialize an object for the EUtils API
    eutils = EUtils()

    # Check what utilities are supported for the EUtils API
    print(eutils.utils)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'info': 'einfo.fcgi', 'query': 'egquery.fcgi', 'search': 'esearch.fcgi', 'fetch': 'efetch.fcgi', 'base': 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils'}



.. code-block:: python


    # Initialize an object for the OpenCitations API
    citations = OpenCitations()

    # Check what utilities are supported for the OpenCitations API
    print(citations.utils)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'references': 'references', 'citations': 'citations', 'metadata': 'metadata', 'base': 'https://w3id.org/oc/index/coci/api/v1'}


Adding New APIs
~~~~~~~~~~~~~~~

If you are interested in extending LISC to interact with additional APIs, then
you can use the `EUtils` and `OpenCitations` objects as examples, and build a
new API object by inheriting from and using the `URLs` object.



**Total running time of the script:** ( 0 minutes  2.557 seconds)


.. _sphx_glr_download_auto_examples_plot_requester_urls.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_requester_urls.py <plot_requester_urls.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_requester_urls.ipynb <plot_requester_urls.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
