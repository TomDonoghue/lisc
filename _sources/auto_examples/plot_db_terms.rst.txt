.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_db_terms.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_db_terms.py:


Database and Terms Lists
========================

Exploring the LISC database and using files of terms.



.. code-block:: python


    from lisc.utils.db import SCDB, create_file_structure







SCDB Database Structure
~~~~~~~~~~~~~~~~~~~~~~~

LISC comes with, and uses, a custom directory structure.

If you want to store terms in files, place those files into a LISC database structure,
and then relevant functions and objects will be able to load and use these terms.




.. code-block:: python


    # Create a database file structure.
    #   When called without a path input, the folder structure is created in the current directory.
    db = create_file_structure()







Storing Terms in Text Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here we will explore using files to store terms to use for LISC collections.

The typical use case would be to curate and write text files manually.

For demonstration here, we will first programmatically create an example text file of terms to use.




.. code-block:: python


    # Set some terms file
    terms = [['brain', 'cortex'], ['body', 'corporeal']]

    # Save the terms out to a txt file
    with open(db.get_file_path('terms', 'terms.txt'), 'w') as term_file:
        for term in terms:
            term_file.write(','.join(term))
            term_file.write('\n')








.. code-block:: python


    # Check the file structure for the created database
    db.check_file_structure()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    lisc_db/
        terms/
            terms.txt
        logs/
        figures/
        data/
            words/
                raw/
                summary/
            counts/



.. code-block:: python


    # Get a list of all files available in the 'terms' folder
    term_files = db.get_files('terms')
    print(term_files)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['terms.txt']



.. code-block:: python


    # Get the full file path for the terms file
    db.get_file_path('terms', 'terms.txt')







Term File Structure
~~~~~~~~~~~~~~~~~~~

For term files, each line stores a new term, with synonyms for the same file stored
as comma-separated values on the same line.




.. code-block:: python


    # Check out the terms file contents
    with open(db.get_file_path('terms', 'terms.txt'), 'r') as term_file:
        print(term_file.read())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    brain,cortex
    body,corporeal


Loading Terms from File
~~~~~~~~~~~~~~~~~~~~~~~

Text files of Terms can be loaded and used with LISC objects, such as 'Counts' and 'Words'.

For a general example, here we will use the underlying 'Base' object.




.. code-block:: python


    # Load the base object in LISC
    from lisc.objects.base import Base








.. code-block:: python


    # Initialize a base LISC object
    base = Base()

    # Add terms to object, loading from file
    base.add_terms_file('terms.txt', directory=db)








.. code-block:: python


    # Check the terms that were loaded from file
    base.check_terms()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    List of terms used: 

    brain    : brain, cortex
    body     : body, corporeal


The same structure can be used to store exclusion and inclusion words for terms.

Exclusion and inclusions words should be stored in their own text files, also
using one line per term, with comma-separated values for synonyms.

Files that reflect the same set of terms, with a file for search terms, and optionally
associated files for inclusion and exclusion terms should line up on the number of lines.
That is, the n-th line of each file should refer to the same term. If a given search
term does not have an associated inclusion or exclusion term, leave that line blank.



**Total running time of the script:** ( 0 minutes  0.004 seconds)


.. _sphx_glr_download_auto_examples_plot_db_terms.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_db_terms.py <plot_db_terms.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_db_terms.ipynb <plot_db_terms.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
